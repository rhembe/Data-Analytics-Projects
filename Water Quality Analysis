{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "## Water Quality Analysis with Classification Models (Random Forest and KNN)",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Introduction\n\nWater is an important natural resource which covers 70% of the Earth's surface, and makes up 65 - 75% of the human body. Every known type of life requires water to survive. Being a fundamental requirement for all life on earth, it is important to ensure that this natural resource is safe to be consumed. \n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Objective\n\nThis notebook focuses on using Machine Learning techniques to predict water potability from 3,276 different water sources. Two models will be explored; K-Nearest Neighbors and the Random Forest Classifier with the aim of determining which model would best predict potability.",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Important Properties in the Dataset\n\n\n1. **pH:** Measure of acidity or alkalinity of water. Measured on a scale of 0 to 14. Values less than 7 indicate acidity, and 8 to 14 indicate alkalinity\n\n2. **Hardness:** Water quality indication of the concentration of alkaline salts in water, mainly calcium and magnesium. \n\n3. **Solids:** Total dissolved solids in ppm (parts per million)\n\n4. **Chloramines:** Concentration of Chloramines in ppm.\n\n5. **Sulfate:** Amount of Sulfates dissolved in water (mg/L)\n\n6. **Conductivity:** Electrical conductivity of water in μS/cm\n\n7. **Organic Carbon:** Concentration of organic carbon in ppm\n\n8. **Trihalomethanes:** Concentration of Trihalomethanes in μg/L\n\n9. **Turbidity:** Amount of solid particles suspended in water that cause light rays shining through the water to scatter. Measured in Nepholometric Turbidity Units (NTU)\n\n10. **Potability:** Water suitable for consumption",
      "metadata": {
        "tags": []
      }
    },
    {
      "cell_type": "markdown",
      "source": "### Data Source\n\nThe dataset used in this lab can be accessed from Kaggle at https://www.kaggle.com/datasets/adityakadiwal/water-potability",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Importing Libraries",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib as mpl\nmpl.style.use(['ggplot'])\nfrom sklearn.model_selection import train_test_split #for data splitting\nfrom sklearn import svm #Support Vector Machine\nfrom sklearn import metrics\n%pip install seaborn\nimport seaborn as sns",
      "metadata": {
        "trusted": true
      },
      "execution_count": 179,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "###\n### Data Collection and Pre-Processing\n\nUsing the 'read_csv' function, the data will be loaded to a Pandas dataframe called water_data",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "water_data = pd.read_csv('water_potability.csv')",
      "metadata": {
        "trusted": true
      },
      "execution_count": 180,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "water_data.head() #To see the first five rows of the data",
      "metadata": {
        "tags": [],
        "trusted": true
      },
      "execution_count": 181,
      "outputs": [
        {
          "execution_count": 181,
          "output_type": "execute_result",
          "data": {
            "text/plain": "         ph    Hardness        Solids  Chloramines     Sulfate  Conductivity  \\\n0       NaN  204.890455  20791.318981     7.300212  368.516441    564.308654   \n1  3.716080  129.422921  18630.057858     6.635246         NaN    592.885359   \n2  8.099124  224.236259  19909.541732     9.275884         NaN    418.606213   \n3  8.316766  214.373394  22018.417441     8.059332  356.886136    363.266516   \n4  9.092223  181.101509  17978.986339     6.546600  310.135738    398.410813   \n\n   Organic_carbon  Trihalomethanes  Turbidity  Potability  \n0       10.379783        86.990970   2.963135           0  \n1       15.180013        56.329076   4.500656           0  \n2       16.868637        66.420093   3.055934           0  \n3       18.436524       100.341674   4.628771           0  \n4       11.558279        31.997993   4.075075           0  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ph</th>\n      <th>Hardness</th>\n      <th>Solids</th>\n      <th>Chloramines</th>\n      <th>Sulfate</th>\n      <th>Conductivity</th>\n      <th>Organic_carbon</th>\n      <th>Trihalomethanes</th>\n      <th>Turbidity</th>\n      <th>Potability</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>204.890455</td>\n      <td>20791.318981</td>\n      <td>7.300212</td>\n      <td>368.516441</td>\n      <td>564.308654</td>\n      <td>10.379783</td>\n      <td>86.990970</td>\n      <td>2.963135</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.716080</td>\n      <td>129.422921</td>\n      <td>18630.057858</td>\n      <td>6.635246</td>\n      <td>NaN</td>\n      <td>592.885359</td>\n      <td>15.180013</td>\n      <td>56.329076</td>\n      <td>4.500656</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.099124</td>\n      <td>224.236259</td>\n      <td>19909.541732</td>\n      <td>9.275884</td>\n      <td>NaN</td>\n      <td>418.606213</td>\n      <td>16.868637</td>\n      <td>66.420093</td>\n      <td>3.055934</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.316766</td>\n      <td>214.373394</td>\n      <td>22018.417441</td>\n      <td>8.059332</td>\n      <td>356.886136</td>\n      <td>363.266516</td>\n      <td>18.436524</td>\n      <td>100.341674</td>\n      <td>4.628771</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9.092223</td>\n      <td>181.101509</td>\n      <td>17978.986339</td>\n      <td>6.546600</td>\n      <td>310.135738</td>\n      <td>398.410813</td>\n      <td>11.558279</td>\n      <td>31.997993</td>\n      <td>4.075075</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "To better understand our data, we can obtain more information about using the shape, column and info functions in Pandas",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "water_data.info ",
      "metadata": {
        "tags": [],
        "collapsed": true,
        "jupyter": {
          "outputs_hidden": true
        },
        "trusted": true
      },
      "execution_count": 182,
      "outputs": [
        {
          "execution_count": 182,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<bound method DataFrame.info of             ph    Hardness        Solids  Chloramines     Sulfate  \\\n0          NaN  204.890455  20791.318981     7.300212  368.516441   \n1     3.716080  129.422921  18630.057858     6.635246         NaN   \n2     8.099124  224.236259  19909.541732     9.275884         NaN   \n3     8.316766  214.373394  22018.417441     8.059332  356.886136   \n4     9.092223  181.101509  17978.986339     6.546600  310.135738   \n...        ...         ...           ...          ...         ...   \n3271  4.668102  193.681735  47580.991603     7.166639  359.948574   \n3272  7.808856  193.553212  17329.802160     8.061362         NaN   \n3273  9.419510  175.762646  33155.578218     7.350233         NaN   \n3274  5.126763  230.603758  11983.869376     6.303357         NaN   \n3275  7.874671  195.102299  17404.177061     7.509306         NaN   \n\n      Conductivity  Organic_carbon  Trihalomethanes  Turbidity  Potability  \n0       564.308654       10.379783        86.990970   2.963135           0  \n1       592.885359       15.180013        56.329076   4.500656           0  \n2       418.606213       16.868637        66.420093   3.055934           0  \n3       363.266516       18.436524       100.341674   4.628771           0  \n4       398.410813       11.558279        31.997993   4.075075           0  \n...            ...             ...              ...        ...         ...  \n3271    526.424171       13.894419        66.687695   4.435821           1  \n3272    392.449580       19.903225              NaN   2.798243           1  \n3273    432.044783       11.039070        69.845400   3.298875           1  \n3274    402.883113       11.168946        77.488213   4.708658           1  \n3275    327.459760       16.140368        78.698446   2.309149           1  \n\n[3276 rows x 10 columns]>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "water_data.columns #Provides the column names",
      "metadata": {
        "trusted": true
      },
      "execution_count": 183,
      "outputs": [
        {
          "execution_count": 183,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Index(['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate', 'Conductivity',\n       'Organic_carbon', 'Trihalomethanes', 'Turbidity', 'Potability'],\n      dtype='object')"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "water_data.shape #To check dimension of the dataset",
      "metadata": {
        "trusted": true
      },
      "execution_count": 184,
      "outputs": [
        {
          "execution_count": 184,
          "output_type": "execute_result",
          "data": {
            "text/plain": "(3276, 10)"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### \n### Checking for null values\nThe data has 3276 rows and 10 columns. We would need to check the dataset for null values. The 'null' function can be used to check this with the following syntax",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "water_data.isnull().sum()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 185,
      "outputs": [
        {
          "execution_count": 185,
          "output_type": "execute_result",
          "data": {
            "text/plain": "ph                 491\nHardness             0\nSolids               0\nChloramines          0\nSulfate            781\nConductivity         0\nOrganic_carbon       0\nTrihalomethanes    162\nTurbidity            0\nPotability           0\ndtype: int64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "There are lots of missing values in the dataset, specifically in the pH, Sulfate and Trihalometane columns. Because we have so many missing values, it is best to replace them with actual values to enable our models work properly. We would fill in the missing values with the mean of the numbers in each of the columns. Lets use the mean function in pandas to compute this.",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "water_data[\"ph\"].mean() #To find the mean of the pH values",
      "metadata": {
        "trusted": true
      },
      "execution_count": 186,
      "outputs": [
        {
          "execution_count": 186,
          "output_type": "execute_result",
          "data": {
            "text/plain": "7.080794504276835"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "water_data[\"Sulfate\"].mean() #To find the mean of the Sulfate values",
      "metadata": {
        "trusted": true
      },
      "execution_count": 187,
      "outputs": [
        {
          "execution_count": 187,
          "output_type": "execute_result",
          "data": {
            "text/plain": "333.7757766108135"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "water_data[\"Trihalomethanes\"].mean() #To find the mean of the Trihalomethane values",
      "metadata": {
        "trusted": true
      },
      "execution_count": 188,
      "outputs": [
        {
          "execution_count": 188,
          "output_type": "execute_result",
          "data": {
            "text/plain": "66.39629294676803"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "###\n### Replacing the missing values\n\nThe mean values obtained from the previous step will now be used to replace the missing values. The 'fillna' function in Pandas will be used to accomplish this. ",
      "metadata": {
        "tags": []
      }
    },
    {
      "cell_type": "code",
      "source": "water_data[\"ph\"] = water_data[\"ph\"].fillna(7.080794) \nwater_data[\"Sulfate\"] = water_data[\"Sulfate\"].fillna(333.775) \nwater_data[\"Trihalomethanes\"] = water_data[\"Trihalomethanes\"].fillna(66.3962) ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 189,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "water_data #To see the changes in the data",
      "metadata": {
        "trusted": true
      },
      "execution_count": 190,
      "outputs": [
        {
          "execution_count": 190,
          "output_type": "execute_result",
          "data": {
            "text/plain": "            ph    Hardness        Solids  Chloramines     Sulfate  \\\n0     7.080794  204.890455  20791.318981     7.300212  368.516441   \n1     3.716080  129.422921  18630.057858     6.635246  333.775000   \n2     8.099124  224.236259  19909.541732     9.275884  333.775000   \n3     8.316766  214.373394  22018.417441     8.059332  356.886136   \n4     9.092223  181.101509  17978.986339     6.546600  310.135738   \n...        ...         ...           ...          ...         ...   \n3271  4.668102  193.681735  47580.991603     7.166639  359.948574   \n3272  7.808856  193.553212  17329.802160     8.061362  333.775000   \n3273  9.419510  175.762646  33155.578218     7.350233  333.775000   \n3274  5.126763  230.603758  11983.869376     6.303357  333.775000   \n3275  7.874671  195.102299  17404.177061     7.509306  333.775000   \n\n      Conductivity  Organic_carbon  Trihalomethanes  Turbidity  Potability  \n0       564.308654       10.379783        86.990970   2.963135           0  \n1       592.885359       15.180013        56.329076   4.500656           0  \n2       418.606213       16.868637        66.420093   3.055934           0  \n3       363.266516       18.436524       100.341674   4.628771           0  \n4       398.410813       11.558279        31.997993   4.075075           0  \n...            ...             ...              ...        ...         ...  \n3271    526.424171       13.894419        66.687695   4.435821           1  \n3272    392.449580       19.903225        66.396200   2.798243           1  \n3273    432.044783       11.039070        69.845400   3.298875           1  \n3274    402.883113       11.168946        77.488213   4.708658           1  \n3275    327.459760       16.140368        78.698446   2.309149           1  \n\n[3276 rows x 10 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ph</th>\n      <th>Hardness</th>\n      <th>Solids</th>\n      <th>Chloramines</th>\n      <th>Sulfate</th>\n      <th>Conductivity</th>\n      <th>Organic_carbon</th>\n      <th>Trihalomethanes</th>\n      <th>Turbidity</th>\n      <th>Potability</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7.080794</td>\n      <td>204.890455</td>\n      <td>20791.318981</td>\n      <td>7.300212</td>\n      <td>368.516441</td>\n      <td>564.308654</td>\n      <td>10.379783</td>\n      <td>86.990970</td>\n      <td>2.963135</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.716080</td>\n      <td>129.422921</td>\n      <td>18630.057858</td>\n      <td>6.635246</td>\n      <td>333.775000</td>\n      <td>592.885359</td>\n      <td>15.180013</td>\n      <td>56.329076</td>\n      <td>4.500656</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.099124</td>\n      <td>224.236259</td>\n      <td>19909.541732</td>\n      <td>9.275884</td>\n      <td>333.775000</td>\n      <td>418.606213</td>\n      <td>16.868637</td>\n      <td>66.420093</td>\n      <td>3.055934</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.316766</td>\n      <td>214.373394</td>\n      <td>22018.417441</td>\n      <td>8.059332</td>\n      <td>356.886136</td>\n      <td>363.266516</td>\n      <td>18.436524</td>\n      <td>100.341674</td>\n      <td>4.628771</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9.092223</td>\n      <td>181.101509</td>\n      <td>17978.986339</td>\n      <td>6.546600</td>\n      <td>310.135738</td>\n      <td>398.410813</td>\n      <td>11.558279</td>\n      <td>31.997993</td>\n      <td>4.075075</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3271</th>\n      <td>4.668102</td>\n      <td>193.681735</td>\n      <td>47580.991603</td>\n      <td>7.166639</td>\n      <td>359.948574</td>\n      <td>526.424171</td>\n      <td>13.894419</td>\n      <td>66.687695</td>\n      <td>4.435821</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3272</th>\n      <td>7.808856</td>\n      <td>193.553212</td>\n      <td>17329.802160</td>\n      <td>8.061362</td>\n      <td>333.775000</td>\n      <td>392.449580</td>\n      <td>19.903225</td>\n      <td>66.396200</td>\n      <td>2.798243</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3273</th>\n      <td>9.419510</td>\n      <td>175.762646</td>\n      <td>33155.578218</td>\n      <td>7.350233</td>\n      <td>333.775000</td>\n      <td>432.044783</td>\n      <td>11.039070</td>\n      <td>69.845400</td>\n      <td>3.298875</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3274</th>\n      <td>5.126763</td>\n      <td>230.603758</td>\n      <td>11983.869376</td>\n      <td>6.303357</td>\n      <td>333.775000</td>\n      <td>402.883113</td>\n      <td>11.168946</td>\n      <td>77.488213</td>\n      <td>4.708658</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3275</th>\n      <td>7.874671</td>\n      <td>195.102299</td>\n      <td>17404.177061</td>\n      <td>7.509306</td>\n      <td>333.775000</td>\n      <td>327.459760</td>\n      <td>16.140368</td>\n      <td>78.698446</td>\n      <td>2.309149</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>3276 rows × 10 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Using the 'null' function a second time to check that the values have been replaced",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "water_data.isnull().sum()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 191,
      "outputs": [
        {
          "execution_count": 191,
          "output_type": "execute_result",
          "data": {
            "text/plain": "ph                 0\nHardness           0\nSolids             0\nChloramines        0\nSulfate            0\nConductivity       0\nOrganic_carbon     0\nTrihalomethanes    0\nTurbidity          0\nPotability         0\ndtype: int64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "No missing values! We can proceed with the analysis. ",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "###\n### Portable versus Non-portable Sources",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "The portability column has values 0 (False) and 1 (True) to indicate if a particular water source is safe for drinking. The 'value_counts' function in Pandas would allow us see the distribution of potable and non-potable sources",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "water_data[\"Potability\"].value_counts() #Counts the 1's and 0's in the dataset",
      "metadata": {
        "trusted": true
      },
      "execution_count": 192,
      "outputs": [
        {
          "execution_count": 192,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0    1998\n1    1278\nName: Potability, dtype: int64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "###\nFrom the results, 1278 water sources are safe to drink, 1998 are not.",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "###\n### Dependent and Independent Variables\nSince the goal of this analysis is to predict if a given water source is portable or not, we can drop the 'Potability' column (dependent variable) and use the model to predict it from the independent variables. The drop function in pandas would be useful to remove this column. ",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "x = water_data.drop(\"Potability\", axis =1) #Independent variable\ny = water_data[\"Potability\"] #becomes the dependent variable",
      "metadata": {
        "trusted": true
      },
      "execution_count": 193,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "###\n### Data Splitting (Train Test Split)\nNext, the data would be split into training and testing sets using 80% of the data for training and 205 for testing",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=2) \n#using 90% of our data for training and 20% for testing",
      "metadata": {
        "trusted": true
      },
      "execution_count": 194,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "### \n### K-Nearest Neighbors Model",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "With KNN, we would need to determine at what K value the model would perform best. To do this, we would first make a plot of 'error rate' and K values within a given range (using 1 to 30 in this case), then choose the K value that gives the minimum error as the ideal value for the model. We would start by importing the libraries.",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report",
      "metadata": {
        "trusted": true
      },
      "execution_count": 195,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "KNN = KNeighborsClassifier()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 196,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "The for loop would be used to iterate the values 1 to 30 and fit them in the KNN model to give their respective error rates as follows",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "error_rate = []\nfor i in range(1,30):\n    KNN1 = KNeighborsClassifier(n_neighbors=i)\n    KNN1.fit(x_train,y_train)\n    pred_1 = KNN1.predict(x_test)\n    error_rate.append(np.mean(pred_1 != y_test))\n\nplt.figure(figsize=(10,6))\nplt.plot(range(1,30),error_rate,color='darkgreen', linestyle='dashed', \n         markersize=6, marker='o',markerfacecolor='red')\nplt.title('Error Rate versus K-Values')\nplt.xlabel('K-Values')\nplt.ylabel('Error Rate')\nplt.xticks(np.arange(0,30,2))\nprint(\"Minimum error is \",min(error_rate),\"at a K value equal to\",error_rate.index(min(error_rate))) ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 218,
      "outputs": [
        {
          "name": "stdout",
          "text": "Minimum error is  0.37652439024390244 at a K value equal to 20\n",
          "output_type": "stream"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1000x600 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "From the above plot, The minimum error occurs at a value of K = 20. We can use this value to feed into the model to determine the accuracy score",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "KNN = KNeighborsClassifier(n_neighbors = 20, leaf_size =20)\nKNN.fit(x_train, y_train) #Model training\nKNN_pred = KNN.predict(X_test) #Model Prediction\nKNN_acc = accuracy_score(y_test, KNN_pred) #To find accuracy score",
      "metadata": {
        "trusted": true
      },
      "execution_count": 198,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "print('The accuracy for KNeighbors is', round(KNN_acc,5))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 199,
      "outputs": [
        {
          "name": "stdout",
          "text": "The accuracy for KNeighbors is 0.62195\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "\nThe classification report for the model can be obtained to show the accuracy and recall information:",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "print(classification_report(y_test, KNN_pred))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 200,
      "outputs": [
        {
          "name": "stdout",
          "text": "              precision    recall  f1-score   support\n\n           0       0.64      0.90      0.75       413\n           1       0.47      0.14      0.22       243\n\n    accuracy                           0.62       656\n   macro avg       0.55      0.52      0.49       656\nweighted avg       0.58      0.62      0.55       656\n\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### \n### Confusion Matrix for KNN Model",
      "metadata": {
        "tags": []
      }
    },
    {
      "cell_type": "code",
      "source": "KNN_CM = confusion_matrix(y_test, KNN_pred)\nsns.heatmap(KNN_CM/np.sum(KNN_CM), annot = True, fmt = '0.2%', cmap = 'crest')",
      "metadata": {
        "trusted": true
      },
      "execution_count": 214,
      "outputs": [
        {
          "execution_count": 214,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 2 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "###\n### Random Forest Classifier Model",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We would start importing the model from the SkLearn library",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from sklearn.ensemble import RandomForestClassifier",
      "metadata": {
        "trusted": true
      },
      "execution_count": 202,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "Rand_F = RandomForestClassifier(n_estimators =100,min_samples_leaf =2, random_state = 42)#Model training\nRand_F.fit(x_train, y_train) #Model fitting\nRand_F_pred = Rand_F.predict(X_test) #Model Prediction\nRand_F_acc = accuracy_score(y_test, Rand_F_pred) #For accuracy score",
      "metadata": {
        "trusted": true
      },
      "execution_count": 203,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "print(\"The accuracy for Random Forest Classifier is\", round(Rand_F_acc,4))\nprint(classification_report(y_test, Rand_F_pred))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 204,
      "outputs": [
        {
          "name": "stdout",
          "text": "The accuracy for Random Forest Classifier is 0.6723\n              precision    recall  f1-score   support\n\n           0       0.69      0.87      0.77       413\n           1       0.60      0.33      0.43       243\n\n    accuracy                           0.67       656\n   macro avg       0.65      0.60      0.60       656\nweighted avg       0.66      0.67      0.64       656\n\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### \n### Confusion Matrix for Random Forest",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "Rand_F_CM = confusion_matrix(y_test, Rand_F_pred)\nsns.heatmap(Rand_F_CM/np.sum(Rand_F_CM), annot = True, fmt = '0.2%', cmap = 'crest')",
      "metadata": {
        "trusted": true
      },
      "execution_count": 215,
      "outputs": [
        {
          "execution_count": 215,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 2 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "###\n### Accuracy Scores for Random Forest and KNN",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "In summary, we can make a table to show the accuracy scores for both models:",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "Models = pd.DataFrame({\n    'Model':['Random Forest Classifier', 'K-Nearest Neighbors'],\n    'Accuracy Score' :[Rand_F_acc, KNN_acc]\n})\nmodels.sort_values(by='Accuracy', ascending=False)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 223,
      "outputs": [
        {
          "execution_count": 223,
          "output_type": "execute_result",
          "data": {
            "text/plain": "                      Model  Accuracy\n0  Random Forest Classifier  0.672256\n1       K-Nearest Neighbors  0.621951",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model</th>\n      <th>Accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Random Forest Classifier</td>\n      <td>0.672256</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>K-Nearest Neighbors</td>\n      <td>0.621951</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### \n### Insights",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Although the difference in accuracies for the two models is relatively small, Random Forest Classifier would perform better with predicting the outcome of this dataset than the KNN Model. Next steps for this analysis would be to use other models such as the Decision Treem Logistics Regression and Support Vector Machine to see their performance with this dataset. ",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "###\n### References",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "[1] The Berkey, \"All About Properties and Measurements of Water\". Online <https://theberkey.com/pages/all-about-properties-and-measurements-of-water> ",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "[2] Water Science School (USGS), \"Dictionary of Water Terms\". Online <https://www.usgs.gov/special-topics/water-science-school/science/dictionary-water-terms>",
      "metadata": {}
    }
  ]
}